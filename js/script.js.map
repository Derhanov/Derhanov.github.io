{"version":3,"sources":["script.js"],"names":["toggleClass","element","tclass","classes","className","pattern","RegExp","replace","hasClass","WidthChange","mq","matches","nav","classList","remove","preloadImage","img","src","getAttribute","getRadioValue","name","radio","document","getElementsByName","Object","val","checked","keys","forEach","getElementById","addEventListener","e","add","menuBtn","closeMenu","window","matchMedia","threshold","querySelectorAll","config","rootMargin","observer","entries","self","unobserve","entry","isIntersecting","target","images","image"],"mappings":"aA0CA,SAASA,YAAYC,EAASC,GAA9B,IAAAC,EAASH,EAAYC,UACbE,EAAUF,IAAAA,OAAQG,GAItBD,EAHcE,EAAIC,KAAOJ,GAGJC,EAAQI,QAAQF,EAAS,IAAMF,EAAU,IAAMD,EAApEC,EAAAA,UAAUK,EAAWL,OAkBzB,SAASM,YAAYC,GACbA,EAAGC,UACHC,IAAIC,UAAUC,OAAO,cAIxBF,IAAAC,UAAAC,OAAA,eACJF,IAAAC,UAAAC,OAAA,aAFOF,IAAIC,UAAUC,OAAO,gBAyBb,SAAAC,aAAAC,GAAS,IAAAC,EAAAD,EAAAE,aAAA,YACjBD,IACPD,EAAAC,IAAAA,GAjGD,IAAME,cAAgB,SAACC,GACnB,IAAMC,EAAQC,SAASC,kBAAkBH,GADvCD,OAAAA,EAMG,OALLK,OAAMH,KAAQC,GAAAA,QAASC,SAAAA,EAAAA,GACnBE,EAAAA,GAAJC,UACOC,EAAKN,EAAOO,GAAAA,SAGdH,GAGRH,SATDO,eAAA,UAAAC,iBAAA,SAAA,SAAAC,GAYqC,SAA/BZ,cAAc,aADpBG,IAASO,UAAAA,IAAe,aAEjBjB,IAAAA,UAAAE,OAAkB,aAEG,UAArBF,cAAA,aACHA,IAAAC,UAAAmB,IAAA,cAEIpB,IAAIC,UAAUmB,OAAI,cAEG,QAArBpB,cAAA,aACHA,IAAAC,UAAAmB,IAAA,YAEGpB,IAAIC,UAAUmB,OAAI,YAEG,WAArBpB,cAAA,aACHA,IAAAC,UAAAmB,IAAA,eAEGpB,IAAIC,UAAUmB,OAAI,iBAO1B,IAAMC,QAAUX,SAASO,eAAe,cAAlCI,IAAAA,SAAUX,eAASO,WAGzBI,QAAQH,iBAAiB,QAAS,WAAlCG,YAAQH,IAAAA,YAcR,IAAMI,UAAYZ,SAASO,eAAe,aAC1CK,UAAUJ,iBAAiB,QAAS,WAChC9B,YAAYY,IAAK,YAGrB,IAAMF,GAAKyB,OAAOC,WAAY,sBAE9B,GAAIA,WAAY,CACZ,IAAM1B,IAAKyB,OAAOC,WAAW,sBAC7B1B,IAAAA,YAAAD,aACAA,YAAYC,KAeZ2B,IAAAA,OAAWf,SAAAgB,iBAAA,cAFfC,QACIC,WAAY,mBAIZC,UAAW,KAGH1B,SAAAA,IAAAA,qBAAA,SAAA2B,EAAAC,GACAA,EAAAA,QAAKC,SAAAA,GACRC,EAAAC,iBAJL/B,aAAA8B,EAAAE,QADJJ,EAAAC,UAAAC,EAAAE,YAUIN,QADJO,OAAOpB,QAAQ,SAAAqB,GAIfR,SAAS1B,QAATkC","file":"script.js","sourcesContent":["const getRadioValue = (name) => {\n    const radio = document.getElementsByName(name);\n    let val;\n    Object.keys(radio).forEach((obj, i) => {\n        if (radio[i].checked) {\n            val = radio[i].value;\n        }\n    });\n    return val;\n};\n\ndocument.getElementById('module').addEventListener('change', (e) => {\n   if(getRadioValue('direction') === 'left') {\n       nav.classList.add('show-left')\n   } else {\n       nav.classList.remove('show-left')\n   }\n    if(getRadioValue('direction') === 'right') {\n        nav.classList.add('show-right')\n    } else {\n        nav.classList.remove('show-right')\n    }\n    if(getRadioValue('direction') === 'top') {\n        nav.classList.add('show-top')\n    } else {\n        nav.classList.remove('show-top')\n    }\n    if(getRadioValue('direction') === 'bottom') {\n        nav.classList.add('show-bottom')\n    } else {\n        nav.classList.remove('show-bottom')\n    }\n});\n\n\nconst menuBtn = document.getElementById('menuToggle'),\n    nav = document.getElementById('mainNav');\n\nmenuBtn.addEventListener('click', function () {\n    toggleClass(nav, 'active')\n});\n\nfunction toggleClass(element, tclass) {\n    let classes = element.className,\n        pattern = new RegExp(tclass),\n        hasClass = pattern.test(classes);\n\n    classes = hasClass ? classes.replace(pattern, '') : classes + ' ' + tclass;\n    element.className = classes.trim();\n};\n\n\nconst closeMenu = document.getElementById('close-nav');\ncloseMenu.addEventListener('click', function () {\n    toggleClass(nav, 'active')\n});\n\nconst mq = window.matchMedia( \"(min-width: 768px)\" );\n\nif (matchMedia) {\n    const mq = window.matchMedia(\"(min-width: 768px)\");\n    mq.addListener(WidthChange);\n    WidthChange(mq);\n}\n\nfunction WidthChange(mq) {\n    if (mq.matches) {\n        nav.classList.remove('show-left') ||\n        nav.classList.remove('show-right') ||\n        nav.classList.remove('show-top') ||\n        nav.classList.remove('show-bottom')\n    }\n}\n\nconst images = document.querySelectorAll('[data-src]');\nconst config = {\n    rootMargin: '0px 0px 50px 0px',\n    threshold: 0.01\n};\n\nlet observer = new IntersectionObserver(function (entries, self) {\n    entries.forEach(entry => {\n        if (entry.isIntersecting) {\n            preloadImage(entry.target);\n            self.unobserve(entry.target);\n        }\n    });\n}, config);\n\nimages.forEach(image => {\n    observer.observe(image);\n});\n\nfunction preloadImage(img) {\n    const src = img.getAttribute('data-src');\n    if (!src) { return; }\n    img.src = src;\n}"]}